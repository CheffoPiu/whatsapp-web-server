name: Deploy WhatsApp Web Server to EC2

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci --only=production
      
    - name: Create deployment package
      run: |
        mkdir -p deploy
        cp -r package.json server.js public ecosystem.config.js deploy/
        cp -r .env.example deploy/.env 2>/dev/null || echo "PORT=3000" > deploy/.env
        tar -czf whatsapp-web-server.tar.gz -C deploy .
        
    - name: Deploy to EC2
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: ${{ secrets.EC2_PORT || 22 }}
        script: |
          # Instalar dependencias del sistema para Amazon Linux
          sudo dnf update -y
          curl -fsSL https://rpm.nodesource.com/setup_18.x | sudo bash -
          sudo dnf install -y nodejs
          sudo npm install -g pm2
          
          # Instalar dependencias para Puppeteer
          sudo dnf install -y atk cups-libs gtk3 libXcomposite libXcursor libXdamage libXext libXi libXrandr libXScrnSaver libXtst pango at-spi2-atk libdrm libxkbcommon libXss
          
          # Configurar firewall
          sudo systemctl start firewalld
          sudo systemctl enable firewalld
          sudo firewall-cmd --permanent --add-port=3000/tcp
          sudo firewall-cmd --reload
          
          # Crear directorio de la aplicación
          sudo mkdir -p /opt/whatsapp-web-server
          sudo mkdir -p /var/log/whatsapp-web-server
          sudo chown -R ec2-user:ec2-user /opt/whatsapp-web-server
          sudo chown -R ec2-user:ec2-user /var/log/whatsapp-web-server
          cd /opt/whatsapp-web-server
          
          # Detener el servicio si está corriendo
          sudo systemctl stop whatsapp-web-server || true
          pm2 delete all || true
          
          # Hacer backup de la versión anterior
          if [ -d "app" ]; then
            sudo mv app app.backup.$(date +%Y%m%d_%H%M%S)
          fi
          
          # Crear directorio para la nueva versión
          sudo mkdir -p app
          cd app
          
    - name: Upload and extract files
      uses: appleboy/scp-action@v0.1.4
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: ${{ secrets.EC2_PORT || 22 }}
        source: "whatsapp-web-server.tar.gz"
        target: "/opt/whatsapp-web-server/app/"
        
    - name: Setup and start service
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: ${{ secrets.EC2_PORT || 22 }}
        script: |
          cd /opt/whatsapp-web-server/app
          
          # Extraer archivos
          sudo tar -xzf whatsapp-web-server.tar.gz
          sudo rm whatsapp-web-server.tar.gz
          
          # Instalar dependencias
          sudo npm install --production
          
          # Configurar permisos
          sudo chown -R ec2-user:ec2-user /opt/whatsapp-web-server
          sudo chmod +x /opt/whatsapp-web-server/app/server.js
          
          # Usar PM2 en lugar de systemd para Amazon Linux
          cd /opt/whatsapp-web-server/app
          pm2 start ecosystem.config.js
          pm2 save
          pm2 startup systemd -u ec2-user --hp /home/ec2-user
          
          # Verificar estado
          sleep 5
          pm2 status
          
          # Mostrar logs
          echo "=== Últimos logs del servicio ==="
          pm2 logs whatsapp-web-server --lines 20
          
    - name: Health check
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: ${{ secrets.EC2_PORT || 22 }}
        script: |
          # Esperar a que el servicio esté listo
          for i in {1..30}; do
            if curl -f http://localhost:3000/api/status > /dev/null 2>&1; then
              echo "✅ Servicio está funcionando correctamente"
              curl -s http://localhost:3000/api/status | jq .
              exit 0
            fi
            echo "Esperando que el servicio esté listo... ($i/30)"
            sleep 10
          done
          
          echo "❌ El servicio no respondió después de 5 minutos"
          pm2 logs whatsapp-web-server --lines 50
          exit 1
